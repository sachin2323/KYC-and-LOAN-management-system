PACKAGE DOCUMENTATION

package user
    import "."


FUNCTIONS

func Add(APIstub shim.ChaincodeStubInterface, args []string, organizationID string) sc.Response
    Add is used to add a new user to state

    args : [id, name, role, email]

func AddIDRecord(APIstub shim.ChaincodeStubInterface, args []string, userAsBytes []byte) sc.Response
    AddIDRecord is used to add a new Identity Record for an existing user

    args: [newEnrollmentId, userId]

func AddRecordID(APIstub shim.ChaincodeStubInterface, recordAsBytes []byte, currentUser User) sc.Response
    AddRecordID adds a recordID to an user

func ApproveRequest(APIstub shim.ChaincodeStubInterface, args []string, userID string) sc.Response
    ApproveRequest will update the status

    args : [bankId, statusUpdate, expireTime, allowedParams] accepted status
    : ["Approved", "Rejected"]

func GetEnrollments(APIstub shim.ChaincodeStubInterface, userAsBytes []byte) sc.Response
    GetEnrollments returns all enrollments of a user

func Revoke(APIstub shim.ChaincodeStubInterface, args []string) sc.Response
    Revoke is used to revoke a user completely

    args : [userId]

func RevokeCheck(APIstub shim.ChaincodeStubInterface, args []string) sc.Response
    RevokeCheck is used to check if the identity record access is revoked

    args : [enrollmentId, userId]

func RevokeIdentityRecord(APIstub shim.ChaincodeStubInterface, args []string) sc.Response
    RevokeIdentityRecord is used to revoke an Identity Record belonging to a
    user

    args : [enrollmentId, userId]

TYPES

type IdentityRecord struct {
    ID           string `json:"id"`
    EnrollmentID string `json:"enrollmentId"`
    UserID       string `json:"userId"`
    Status       string `json:"status"`
    CreatedAt    string `json:"createdAt"`
    RevokedAt    string `json:"revokedAt"`
    Class        string `json:"class"`
}
    IdentityRecord definition

type SearchResult struct {
    ID   string         `json:"key"`
    Data IdentityRecord `json:"record"`
}
    SearchResult definition

type User struct {
    ID             string   `json:"id"`
    Name           string   `json:"name"`
    Role           string   `json:"role"`
    Email          string   `json:"email"`
    OrganizationID string   `json:"organizationId"`
    NationalID     string   `json:"national_id"`
    Status         string   `json:"status"`
    EnrollmentIDs  []string `json:"enrollmentIds"`
    RecordIDs      []string `json:"recordIds"`
    CreatedAt      string   `json:"createdAt"`
    UpdatedAt      string   `json:"updatedAt"`
    Class          string   `json:"class"`
}
    User is a user in the network


